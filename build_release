#!/bin/bash
# CDDL HEADER START
#
# This file and its contents are supplied under the terms of the
# Common Development and Distribution License ("CDDL"), version 1.0.
# You may only use this file in accordance with the terms of version
# 1.0 of the CDDL.
#
# A full copy of the text of the CDDL should have accompanied this
# source.  A copy of the CDDL is also available via the Internet at
# http://www.illumos.org/license/CDDL.
#
# CDDL HEADER END

# Copyright 2024 Saso Kiselkov. All rights reserved.

function my_realpath() {
	[[ $1 = /* ]] && echo "$1" || echo "$PWD/${1#./}"
}

OUTPUT_DIR="OpenWXR"
OS="$(uname)"

case "$OS" in
Darwin)
	INSTALL="install -m 644"
	REALPATH=my_realpath
	;;
*)
	INSTALL="install -D -m 644"
	REALPATH=realpath
	;;
esac

while getopts "A:a:g:h" opt; do
	case "$opt" in
	A)
		ACF_TYPE="$OPTARG"
		;;
	a)
		LIBACFUTILS="$(${REALPATH} "$OPTARG")"
		;;
	g)
		OPENGPWS="$(${REALPATH} "$OPTARG")"
		;;
	h)
		cat << EOF
Usage: $0 -a <libacfutils>
    -a <libacfutils> : path to built libacfutils repo
EOF
		exit
		;;
	*)
		echo "Invalid option -$OPTARG" >&2
		exit 1
		;;
	esac
done

if [ -z "$LIBACFUTILS" ]; then
	echo "Missing mandatory argument -a." \
	    "Try $0 -h for more information" >&2
	exit 1
fi
if [ -z "$OPENGPWS" ]; then
	echo "Missing mandatory argument -g." \
	    "Try $0 -h for more information" >&2
	exit 1
fi

if ! which glslang &> /dev/null && ! which glslangValidator &> /dev/null; then
	cat << EOF >&2
Couldn't find the Vulkan SDK. Please download the SDK from:
https://vulkan.lunarg.com/sdk/home
Then symlink glslangValidator and spirv-cross in your \$PATH
EOF
	exit 1
fi

set -e

rm -rf "$OUTPUT_DIR" "$OUTPUT_DIR.zip"
mkdir -p "$OUTPUT_DIR"

if [[ "$OS" = "Darwin" ]]; then
	NCPUS=$(( $(sysctl -n hw.ncpu) + 1 ))
	rm -f CMakeCache.txt
	( cd src && rm -f CMakeCache.txt && \
	    cmake . -DLIBACFUTILS="${LIBACFUTILS}" \
	    -DOPENGPWS="$OPENGPWS" \
	    -DCMAKE_OSX_ARCHITECTURES="x86_64;arm64" && \
	    make -j "$NCPUS" ) || exit 1
else
	NCPUS=$(( $(grep 'processor[[:space:]]\+:' /proc/cpuinfo  | wc -l) + \
	    1 ))
	( cd src && rm -f CMakeCache.txt && \
	    cmake . -DLIBACFUTILS="${LIBACFUTILS}" \
	    -DOPENGPWS="$OPENGPWS" && \
	    make -j "${NCPUS}" ) || exit 1
	( cd src && rm -f CMakeCache.txt && \
	    cmake . -DLIBACFUTILS="${LIBACFUTILS}" \
	    -DOPENGPWS="$OPENGPWS" \
	    -DCMAKE_TOOLCHAIN_FILE="XCompile.cmake" \
	    -DHOST=x86_64-w64-mingw32 && \
	    make -j "${NCPUS}" && \
	    "$LIBACFUTILS/tools/mksyms" "../win_x64/OpenWXR.xpl" > \
	    "../win_x64/syms.txt" ) || exit 1
fi

if [[ $(uname) = Linux ]]; then
	( cd data && make ) || exit 1
fi

if [[ $(uname) = "Linux" ]]; then
	$INSTALL -- "lin_x64/${OUTPUT_DIR}.xpl" \
	    "$OUTPUT_DIR/lin_x64/${OUTPUT_DIR}.xpl"
	$INSTALL -- "win_x64/${OUTPUT_DIR}.xpl" \
	    "$OUTPUT_DIR/win_x64/${OUTPUT_DIR}.xpl"
	$INSTALL -- "win_x64/syms.txt" "$OUTPUT_DIR/win_x64/syms.txt"
else
	mkdir -p "$OUTPUT_DIR/mac_x64" \
	    "$OUTPUT_DIR/data" \
	    "$OUTPUT_DIR/openwxr" \
	    "$OUTPUT_DIR/fonts/Inconsolata"
	$INSTALL -- "mac_x64/${OUTPUT_DIR}.xpl" \
	    "$OUTPUT_DIR/mac_x64/${OUTPUT_DIR}.xpl"
fi

find data/bin fonts -iname '*.opus' -or -iname '*.glsl*' -or -iname '*.spv' \
    -or -iname '*.ttf' -or -iname '*.otf' | \
    while read; do
	$INSTALL -- "$REPLY" "$OUTPUT_DIR/$REPLY"
done

if [ -n "$ACF_TYPE" ]; then
	cp "acf-configs/$ACF_TYPE/OpenWXR.cfg" "$OUTPUT_DIR"
fi

$INSTALL -- "api/openwxr/xplane_api.h" "$OUTPUT_DIR/openwxr/xplane_api.h"
$INSTALL -- "api/openwxr/wxr_intf.h" "$OUTPUT_DIR/openwxr/wxr_intf.h"

# ZIP up the product
zip -r "$OUTPUT_DIR.zip" "$OUTPUT_DIR"
